from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'Pretensioning', datumAxis=None, magnitude=50000.0, name='Bolt_Preload', 
    preTenSecPartLevel=True, region=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces.getSequenceFromMask(
    mask=('[#f ]', ), )))
mdb.models['Model-1'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['Model-1'].keywordBlock.replace(498, 
    '\n** \n** FIELD OUTPUT: F-Output-Pretension\n** \n*NODE FILE, FREQUENCY=1\nU')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
    'Pretensioning', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='Beam_Disp', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[19], )), u1=UNSET, u2=
    -10.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Static_Preload', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=0, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Static_Preload'].submit(consistencyChecking=OFF)
mdb.jobs['Static_Preload']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'ELKADY-DELL', 'handle': 0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SECONDARY SURFACE IN THE TIE PAIR (ASSEMBLY_BEAM-1_SURF-BEAM-WELDED-END,ASSEMBLY_END-PLATE-1_SURF-PLATE-WELDED-FACE) IS FINER THAN THE MAIN SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BEAM-1_SURF-BEAM-WELDED-END-ASSEMBLY_END-PLATE-1_SURF-PLATE-WELDED-FACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '40 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DRIVE\\Bolt Explicit Pretension\\Static_Preload.odb', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'ELKADY-DELL', 'handle': 11116, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STEP, {
    'stepName': 'Adding a pretension force to the bolt', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Static_Preload', 'memory': 697.0})
mdb.jobs['Static_Preload']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32522.0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(MINIMUM_MEMORY, {'minimum_memory': 108.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 25, 'iterations': 26, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.175, 'attempts': 1, 
    'timeIncrement': 0.075, 'increment': 2, 'stepTime': 0.175, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.25, 'attempts': 1, 
    'timeIncrement': 0.075, 'increment': 3, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.45, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.45, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.55, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.55, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.65, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.65, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.85, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.85, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.95, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 0.95, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0500000000000001, 'increment': 11, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(JOB_COMPLETED, {
    'time': 'Fri Apr 21 10:12:34 2023', 'jobName': 'Static_Preload'})
# Save by ahmed on 2023_04_21-10.14.17; build 2021.HF6 2021_04_09-13.38.16 168095
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Static_Preload'].submit(consistencyChecking=OFF)
mdb.jobs['Static_Preload']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'ELKADY-DELL', 'handle': 0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SECONDARY SURFACE IN THE TIE PAIR (ASSEMBLY_BEAM-1_SURF-BEAM-WELDED-END,ASSEMBLY_END-PLATE-1_SURF-PLATE-WELDED-FACE) IS FINER THAN THE MAIN SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BEAM-1_SURF-BEAM-WELDED-END-ASSEMBLY_END-PLATE-1_SURF-PLATE-WELDED-FACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '40 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DRIVE\\Bolt Explicit Pretension\\Static_Preload.odb', 
    'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'ELKADY-DELL', 'handle': 25004, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STEP, {
    'stepName': 'Adding a pretension force to the bolt', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Static_Preload', 'memory': 697.0})
mdb.jobs['Static_Preload']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32522.0, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(MINIMUM_MEMORY, {'minimum_memory': 108.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 25, 'iterations': 26, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.175, 'attempts': 1, 
    'timeIncrement': 0.075, 'increment': 2, 'stepTime': 0.175, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.25, 'attempts': 1, 
    'timeIncrement': 0.075, 'increment': 3, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.45, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.45, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.55, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.55, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.65, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.65, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.85, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.85, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 0.95, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 0.95, 'step': 1, 
    'jobName': 'Static_Preload', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0500000000000001, 'increment': 11, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Static_Preload', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Static_Preload']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Static_Preload'})
mdb.jobs['Static_Preload']._Message(JOB_COMPLETED, {
    'time': 'Sat May  6 09:35:19 2023', 'jobName': 'Static_Preload'})
# Save by ahmed on 2023_05_06-09.36.20; build 2021.HF6 2021_04_09-13.38.16 168095
